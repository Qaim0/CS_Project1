import datetime
import pygame
import pygame_widgets
from pygame.locals import *
from button_class import Button
from graphs import *
from planet_calculations import *
from sim_info import solar_system_info, instructions, system_info, solar_system_dicts
from tools import create_widgets, colour_dict
from mysql_functions import user_has_access
from tkinter import messagebox
from tkinter import mainloop, Tk


# fonts = pygame.font.get_fonts()
#     main window colour \ overlay colour / text colour
dark_grey_colours = ['black', (36, 36, 36), 'white']
grey_colours = [(100, 100, 100), (36, 36, 36), 'white']
dark_blue_colours = ['#05070f', (12, 15, 26), 'white']
font = pygame.font.SysFont('Consolas', 20)

theme_colours = ['#242424', '#0C0F1A', 'white']

pygame.init()





info_flag = True
display_menu = False
show_settings = False
show_instructions = False
show_graphs = False
distance = 0

window = pygame.display.set_mode((0, 0), FULLSCREEN | DOUBLEBUF)
sunImg = pygame.image.load("C:/Users/qaimm/PycharmProjects/PROJECT/planet images/sun.png").convert_alpha()
mercuryImg = pygame.image.load('C:/Users/qaimm/PycharmProjects/PROJECT/planet images/mercury.png').convert_alpha()
venusImg = pygame.image.load('C:/Users/qaimm/PycharmProjects/PROJECT/planet images/venus.png').convert_alpha()
earthImg = pygame.image.load('C:/Users/qaimm/PycharmProjects/PROJECT/planet images/earth.png').convert_alpha()
marsImg = pygame.image.load('C:/Users/qaimm/PycharmProjects/PROJECT/planet images/mars.png').convert_alpha()
jupiterImg = pygame.image.load('C:/Users/qaimm/PycharmProjects/PROJECT/planet images/jupiter.png').convert_alpha()
saturnImg = pygame.image.load('C:/Users/qaimm/PycharmProjects/PROJECT/planet images/saturn.png').convert_alpha()
uranusImg = pygame.image.load('C:/Users/qaimm/PycharmProjects/PROJECT/planet images/uranus.png').convert_alpha()
neptuneImg = pygame.image.load('C:/Users/qaimm/PycharmProjects/PROJECT/planet images/neptune.png').convert_alpha()
solarSystemImg = pygame.image.load(
    'C:/Users/qaimm/PycharmProjects/PROJECT/planet images/solar_system.jpg').convert_alpha()
solarSystemImg = pygame.transform.scale(solarSystemImg, (400, 150))
logo = pygame.image.load("C:/Users/qaimm/PycharmProjects/PROJECT/sim logo2.png").convert_alpha()
# WIDTH = pygame.display.get_surface().
# ---------GRAPHS-----

distance_graphImg = pygame.image.load(
    'C:/Users/qaimm/PycharmProjects/PROJECT/graphs/distance_graph.png').convert_alpha()
anomaly_graphImg = pygame.image.load(
    'C:/Users/qaimm/PycharmProjects/PROJECT/graphs/anomaly_graph.png').convert_alpha()

imgs = [sunImg, mercuryImg, venusImg, earthImg, marsImg, jupiterImg, saturnImg, uranusImg, neptuneImg]

for x in range(len(imgs)):
    imgs[x] = pygame.transform.scale(imgs[x], (325, 170))

planet_lst = ["Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"]
setting_labels = ['Background colour', 'FPS', 'Graph figure colour', 'Graph line colour', 'Accent colour',
                  'Distance Metric']
graphTab_labels = ['GRAPH TYPE', 'PLANET 1', 'PLANET 2']

distance_graph = Graph('distance_graph', 'Time since graph creation (S)', 'Distance between Planets (AU)')
anomaly_graph = Graph('anomaly_graph', 'Time since graph creation (S)', 'True anomaly of the planet (°)')

graphs = [distance_graph, anomaly_graph]


class Sim:
    def __init__(self):
        self.instances = []
        self.sun = ""
        self.scale = 1
        self.speed_multiplier = 2.5
        self.default_vals = True
        self.theme = 0 # dark grey, dark blue, light grey
        self.overlay_colour = dark_blue_colours[1]
        self.txt_colour = dark_blue_colours[2]
        self.window_colour = dark_blue_colours[0]
        self.date_edited = False
        self.shiftx = 240
        self.shifty = 0
        self.drawline = True
        self.orbit_ticks = 0  # sim ticks when reset / default button ticks pressed
        self.sim_accent_colour = 'red'
        self.sim_running = True
        self.distance_metric = 'AU'
        self.user_access = True
        self.year = 2000
        self.day = 1
        self.month = 1

    def update_scale(self, scale_multiplier):
        for instances in self.instances:
            instances.radius *= scale_multiplier
        self.scale *= round(scale_multiplier, 2)

    def zoom_out(self):
        if self.scale > 0.05:
            return True
        return False

    def zoom_in(self):
        if self.scale < 9:
            return True
        return False

    def check_theme(self):
        if self.theme == 0:
            self.overlay_colour = dark_grey_colours[1]
            self.txt_colour = dark_grey_colours[2]
            self.window_colour = dark_grey_colours[0]
        elif self.theme == 1:
            self.overlay_colour = dark_blue_colours[1]
            self.txt_colour = dark_blue_colours[2]
            self.window_colour = dark_blue_colours[0]

        else:
            self.overlay_colour = grey_colours[1]
            self.txt_colour = grey_colours[2]
            self.window_colour = grey_colours[0]

    def increase_speed(self):
        if self.speed_multiplier < 12:
            self.speed_multiplier += 0.15

    def decrease_speed(self):
        if self.speed_multiplier > 0.1:
            self.speed_multiplier -= 0.15


class Body:
    SCALE = 150

    def __init__(self, name, colour, radius):
        self.name = name
        self.startx = 0
        self.starty = 0
        self.x = 0
        self.y = 0
        self.orbital_points = []
        self.colour = colour
        self.radius = radius
        self.clicked_on = False
        self.circleRect = 0
        self.current_Rectx = 0
        self.prev_shiftx = 0
        self.stats = []
        self.enableTxt = False
        self.enableDistance = False
        self.radius_vector = 0
        self.full_orbit_points = []
        self.rotated_once = False
        self.default_vals = True
        self.append_orbit = True
        self.same_pos = False  # planet hasnt moved on screen (uranus and neptune)

        # ------Modifiable planet elements-----#
        self.semi_major = 0
        self.eccentricity = 0
        self.orbit_incl = 0
        self.long_asc_node = 0
        self.long_perihelion = 0
        self.true_anomaly = 0

    def get_planet_coords(self, planet, jul_centuries):

        global k, long_perihelion, long_asc_node, orbit_incl
        k = 0

        i = planet_lst.index(planet)
        planet_elements = all_planetElements[i]
        planet_rates = all_planetRates[i]

        if self.default_vals:
            self.semi_major = planet_elements[0] + (planet_rates[0] * jul_centuries)  # AU (CONSTANT) aGen
            self.eccentricity = planet_elements[1] + (planet_rates[1] * jul_centuries)  # CONSTANT eGen

        orbit_incl = planet_elements[2] + (planet_rates[2] * jul_centuries)  # ORBIT INCLINCATION: CONSTANT iGen
        self.orbit_incl = orbit_incl % 360
        long_asc_node = planet_elements[5] + (
                planet_rates[5] * jul_centuries)  # LONGITUDE OF ASCENDING NODE (CONSTANT) WGen
        self.long_asc_node = long_asc_node % 360

        long_perihelion = planet_elements[4] + (planet_rates[4] * jul_centuries)  # LONGITUDE OF PERIHELION wGen
        self.long_perihelion = long_perihelion % 360
        if self.long_perihelion < 0:
            self.long_perihelion = 360 + self.long_perihelion

        orbit_pos = planet_elements[3] + (planet_rates[3] * jul_centuries)  # LGen
        orbit_pos = orbit_pos % 360

        if orbit_pos < 0:
            orbit_pos = 360 + orbit_pos
        mean_anomaly = orbit_pos - self.long_perihelion

        if mean_anomaly < 0:
            mean_anomaly = 360 + mean_anomaly
        k = math.pi / 180.0

        eccentric_anomaly = calc_ecc_anomaly(self.eccentricity, mean_anomaly, 6, k)
        anomaly_arg = (math.sqrt((1 + self.eccentricity) / (1 - self.eccentricity))) * (
            math.tan(to_radians(eccentric_anomaly) / 2))

        if anomaly_arg < 0:
            true_anomaly = 2 * (math.atan(anomaly_arg) / k + 180)  # atan = inverse tan
        else:
            true_anomaly = 2 * (math.atan(anomaly_arg) / k)
        self.true_anomaly = true_anomaly

        self.radius_vector = self.semi_major * (1 - (self.eccentricity * (math.cos(to_radians(eccentric_anomaly)))))  # rGen

        planet_x = self.radius_vector * (math.cos(to_radians(self.long_asc_node))
                                         * math.cos(
                    to_radians(true_anomaly + self.long_perihelion - self.long_asc_node))
                                         - math.sin(to_radians(self.long_asc_node))
                                         * math.sin(
                    to_radians(true_anomaly + self.long_perihelion - self.long_asc_node))
                                         * math.cos(to_radians(self.orbit_incl)))
        planet_y = self.radius_vector * (math.sin(to_radians(self.long_asc_node))
                                         * math.cos(
                    to_radians(true_anomaly + self.long_perihelion - self.long_asc_node))
                                         + math.cos(to_radians(self.long_asc_node))
                                         * math.sin(
                    to_radians(true_anomaly + self.long_perihelion - self.long_asc_node))
                                         * math.cos(to_radians(self.orbit_incl)))

        return planet_x, planet_y

    def generate_stats(self, planet):
        i = solar_system.instances.index(planet)
        planet_dict = solar_system_dicts[i]
        self.stats.append(self.name)
        for key, value in planet_dict.items():
            self.stats.append(str(key) + ": " + str(value))

    def display_body_txt(self, y, move_y):
        global distance
        label = []
        y_val = 20

        distance = self.radius_vector
        distance = convert_to_km(distance, solar_system.distance_metric)
        print(distance)
        distance = round(distance, 3)
        # automatically set as AU by above function#

        if self.enableDistance:
            blit_line(f'Distance from the sun: {distance:,} {solar_system.distance_metric}',
                      self.circleRect.topright[0] + 100, y + y_val + move_y, 'white')
            return
        if self.enableTxt:
            for line in range(1, len(self.stats)):
                label.append(font.render(self.stats[line], True, solar_system.txt_colour))
            for line in label:
                window.blit(line, (self.circleRect.topright[0] + 100, y + y_val + move_y))
                y_val += 20
            blit_line(f'Distance from the sun: {distance:,} {solar_system.distance_metric}',
                      self.circleRect.topright[0] + 100, y + y_val + move_y, 'white')



    def draw(self):  # radius scale
        global line_endx, mercury_icon
        x = self.x * self.SCALE + SIM_WIDTH / 2
        y = -self.y * self.SCALE + SIM_HEIGHT / 2

        if len(self.orbital_points) > 2:
            updated_points = []
            updated_points2 = []
            if self.rotated_once:
                for point in self.orbital_points:
                    orbit_x, orbit_y = point
                    orbit_x = orbit_x * self.SCALE + SIM_WIDTH / 2
                    orbit_y = -orbit_y * self.SCALE + SIM_HEIGHT / 2
                    updated_points2.append((orbit_x + solar_system.shiftx, orbit_y + solar_system.shifty))
            else:
                for point in self.orbital_points:
                    orbit_x, orbit_y = point
                    orbit_x = orbit_x * self.SCALE + SIM_WIDTH / 2
                    orbit_y = -orbit_y * self.SCALE + SIM_HEIGHT / 2
                    updated_points.append((orbit_x + solar_system.shiftx, orbit_y + solar_system.shifty))

            if solar_system.drawline:
                if self.rotated_once:
                    points = updated_points2
                else:
                    points = updated_points
                pygame.draw.aalines(window, self.colour, False, points, 1)

        self.circleRect = pygame.draw.circle(window, self.colour, (x + solar_system.shiftx, y + solar_system.shifty),
                                             self.radius)
        # if self.name == 'Uranus' or self.name == 'Neptune':]##

        if self.name == 'Saturn' or self.name == 'Jupiter' or self.name == 'Uranus' or self.name == 'Neptune':
            if round(self.x, 2) == round((self.current_Rectx - self.prev_shiftx) + solar_system.shiftx, 2):
                self.append_orbit = False
                self.same_pos = True
            else:
                self.current_Rectx = self.x
                self.prev_shiftx = solar_system.shiftx
                self.append_orbit = True
                self.same_pos = False

        if self.circleRect.collidepoint(pygame.mouse.get_pos()) or self.clicked_on:
            outer_circle_rect = pygame.draw.circle(window, solar_system.txt_colour,
                                                   (x + solar_system.shiftx, y + solar_system.shifty), self.radius + 5,
                                                   width=1)
            line_endx = outer_circle_rect.midright[0] + 100
            pygame.draw.line(window, solar_system.txt_colour, (x + solar_system.shiftx, y + solar_system.shifty),
                             (line_endx, y + solar_system.shifty))
            name_txt = font.render(self.name, True, self.colour)
            window.blit(name_txt, (line_endx + 10, y - 5 + solar_system.shifty))
            self.display_body_txt(y, solar_system.shifty)

    def check_fully_rotated(self):
        thresh = 0.001

        x_diff = abs(round((self.startx * solar_system.scale) - (self.x * solar_system.scale), 3))
        y_diff = abs(round((self.starty * solar_system.scale) - (self.y * solar_system.scale), 3))

        ticks = pygame.time.get_ticks()

        if ticks < 6000:
            solar_system.speed_multiplier = 2.7

        if 12000 >= ticks <= 12500:
            solar_system.speed_multiplier = 1

        if x_diff <= thresh and y_diff <= thresh:
            if self.name == 'Neptune' or self.name == 'Uranus':
                if self.same_pos:
                    return
            # if x_diff == 0 and y_diff == 0:
            #     return
            #

            if ticks > 2500 and (ticks - solar_system.orbit_ticks > 2000):
                self.rotated_once = True
                self.append_orbit = False




def set_start_pos(planet):
    planet.startx = planet.x
    planet.starty = planet.y
    solar_system.orbit_ticks = pygame.time.get_ticks()


def create_solarSystem():
    global solar_system
    solar_system = Sim()
    sun = Body('Sun', 'yellow', 20)  # sun position is centre of the screen
    solar_system.sun = sun
    sun.x = 0
    sun.y = 0
    mercury = Body('Mercury', 'grey', 2)
    venus = Body('Venus', '#D8BE8E', 6)
    earth = Body('Earth', 'blue', 6)
    mars = Body('Mars', 'red', 4)
    jupiter = Body('Jupiter', '#F6F0E3', 10)
    saturn = Body('Saturn', '#F3CE89', 9)
    uranus = Body('Uranus', '#2BC7B4', 16)
    neptune = Body('Neptune', 'dark blue', 14)
    # uranus.rotated_once = True
    # uranus.orbit = [(14.453945173106455, -13.709299359987261), (14.689020276420049, -13.470676584411999), (14.689099722327166, -13.470586525942286), (14.689174042192336, -13.470502277272576), (14.919913788000645, -13.227954324757773), (14.919989232228541, -13.227865840696703), (14.920067190713075, -13.227774406715257), (15.146526525142999, -12.981238123336286), (15.146602973517703, -12.981145340950105), (15.368719239597517, -12.730691315338252), (15.36879173794675, -12.730600246771306), (15.368866652341026, -12.73050614215213), (15.586565712471623, -12.476215544811215), (15.586639070626706, -12.476120145424304), (15.58671242819819, -12.476024745606505), (15.79992562084721, -12.217978396686437), (15.799997399858002, -12.21788172954812), (15.800066862853969, -12.217788180303522), (16.008740789140486, -11.956049335720973), (16.008808703288672, -11.955954586919988), (16.00887888065295, -11.955856679420801), (16.212942749107977, -11.69051446396339), (16.213009093129816, -11.690418542483854), (16.213077648023145, -11.690319423226581), (16.4124670149912, -11.421458064806766), (16.412533927124993, -11.42135776274788), (16.412600838646092, -11.421257460297474), (16.6072528476746, -11.148962373648724), (16.607318096083258, -11.148860917337295), (16.607381239114687, -11.148762733446992), (16.797247109109687, -10.873100743792891), (16.79730862339555, -10.873001471562294), (16.79737218754152, -10.872898889892253), (16.98238749185434, -10.593963846154033), (16.982447358042048, -10.593863513880217), (16.982509219146888, -10.593759836842397), (17.162615546998886, -10.311640259020358), (17.162675686843368, -10.311535516921094), (17.162735826048873, -10.311430774471647), (17.337876432897595, -10.02621625576455), (17.337934832557867, -10.026110478546263), (17.337991347743937, -10.026008113172974), (17.50812230847363, -9.73776871751313), (17.508177122967535, -9.737665380328503), (17.50823376397073, -9.73755859824751), (17.673297331223555, -9.446392443141308), (17.673350427692892, -9.44628816372361), (17.83329801149755, -9.15228506542994), (17.833349374399525, -9.152179874270805), (17.833402448746625, -9.152071176437504), (17.988183456013346, -8.855319902279504), (17.988231415299715, -8.85521736530622), (17.988282681476964, -8.855107756530984), (18.13784833401092, -8.555702478090634), (18.13789777704542, -8.555591990415195), (18.137945624502727, -8.555485066586924), (18.282253462597282, -8.25351004384546), (18.282301066753554, -8.253398709008552), (18.282347134646546, -8.253290965357282), (18.421351459355026, -7.948841907597635), (18.421395734305772, -7.9487333756292795), (18.42144148441668, -7.948621225670313), (18.555099869371684, -7.641791061522676), (18.55513950606236, -7.64168905840916), (18.555183388887425, -7.641576126151629), (18.683453805820378, -7.332462226468645), (18.683495808636327, -7.332348544916344), (18.683536455864367, -7.3322385302825674), (18.806382404935857, -7.020927886971671), (18.806422514258653, -7.020813488883134), (18.80646132906997, -7.020702780838187), (18.92384390051775, -6.707294059772475), (18.923880871764787, -6.7071826906826155), (18.923919074698382, -6.707067609076601), (19.035802441959497, -6.391656473510479), (19.03583521667778, -6.3915519420523195), (19.035871502303664, -6.3914362105999425), (19.142220533377163, -6.074122727822014), (19.14225489130525, -6.074006380338041), (19.142288140239934, -6.0738937858147), (19.24307253163736, -5.75476728259468), (19.24310495070072, -5.754650352697508), (19.243136323311507, -5.7545371945596875), (19.33832414438018, -5.433698812555881), (19.338353631804438, -5.433585123872219), (19.338384101440887, -5.433467645398765), (19.427946300307976, -5.111015315471616), (19.42797205339666, -5.110908741559947), (19.511883387415313, -4.7869413977184445), (19.511909077477892, -4.786826747092909), (19.51193562316833, -4.786708274636344), (19.590167606993067, -4.461328091690533), (19.590192178633746, -4.461209173920679), (19.590216749552724, -4.461090256016917), (19.662746363219775, -4.1343927293685665), (19.662768952615014, -4.134273400747446), (19.662790812630742, -4.134157921320631), (19.729596649061996, -3.806238920790911), (19.72961724934034, -3.8061192160518), (19.72963651991112, -3.806007234099665), (19.79069746220623, -3.4769706986240263), (19.79071546697945, -3.476854525071431), (19.79073407119551, -3.476734478970958), (19.84603088454702, -3.1466847116866985), (19.846047488454634, -3.146564359365469), (19.846064091632545, -3.146444006958655), (19.895580500569015, -2.8154778776248603), (19.89559509839561, -2.8153572540307974), (19.895609224628412, -2.8152405214505207), (19.93933058876265, -2.4834551608445823), (19.939343176075965, -2.4833343011062556), (19.93935454463265, -2.4832251374189567), (19.977267115864898, -2.1507257126519357), (19.97727734783965, -2.1506085571569775), (19.977287920158602, -2.150487496430555), (20.00937972354255, -1.8173793925270727), (20.009388279059365, -1.8172581661666898), (20.009396833841883, -1.8171369397694175), (20.035658417831883, -1.483517927064022), (20.0356649532251, -1.4833965703329905), (20.035671277099432, -1.4832791283118192), (20.056094839450395, -1.1492471234825365), (20.056099352748575, -1.1491256717331677), (20.056103428643947, -1.14901597336818), (20.070682592804935, -0.8146768481568125), (20.070685002393557, -0.8145592564923719), (20.070687491578127, -0.8144377451056377), (20.079417665016514, -0.4798974649463128), (20.0794181307507, -0.4797759293207436), (20.079418595749406, -0.4796543937072373), (20.082297196984094, -0.14501115133710613), (20.082295638413555, -0.1448896268792949), (20.079323814075966, 0.18975448037773346), (20.07932023243452, 0.1898759583009468), (20.07931665005828, 0.18999743618756187), (20.070493648912176, 0.5245324211545399), (20.07048804462847, 0.5246538171328361), (20.070482620429118, 0.5247712970653995), (20.055810365005907, 0.8591146342260167), (20.05580298575333, 0.8592320006788475), (20.055795359804236, 0.8593532792867729), (20.03527867825556, 1.1933911606387235), (20.03526934551419, 1.1935083793759764), (20.03525970096109, 1.193629505332489), (20.00890523474859, 1.5272560708549223), (20.00889357528938, 1.5273770089636751), (20.008881915099327, 1.527497946987077), (19.97669784140405, 1.8606113766962933), (19.976684169912165, 1.8607320916629477), (19.97667093874171, 1.8608489125056402), (19.938665826015885, 2.1933592190678857), (19.938650652460794, 2.1934757900363318), (19.938634972404664, 2.1935962465959102), (19.894821176378397, 2.5253941352002687), (19.894804064386737, 2.5255104222543996), (19.894786381281385, 2.5256305854239516), (19.84517791323013, 2.856610915573597), (19.84515823321966, 2.856730750499121), (19.845138552485675, 2.856850585290902), (19.789751385344438, 3.186908500063025), (19.78972971377978, 3.187027971744728), (19.789708740611236, 3.1871435893624525), (19.728556416406562, 3.5161976379944275), (19.728533523004018, 3.5163128705638953), (19.72850986578106, 3.51643194406389), (19.661612957889346, 3.8443700924717765), (19.661588150565038, 3.844484906314785), (19.661562515625672, 3.8446035471190587), (19.58894233668907, 4.171321886734192), (19.588914732593732, 4.171440060501171), (19.58888712778559, 4.171558234086682), (19.510566927465852, 4.496953276098596), (19.51053736199319, 4.497070948290804), (19.510508749569823, 4.4971848244217645), (19.4265077946715, 4.821176260234213), (19.426477293538696, 4.8212896180229095), (19.33682583979872, 5.143767689280256), (19.336792379919927, 5.143884255997815), (19.33675999872311, 5.143997062292285), (19.24148346280391, 5.464862803885897), (19.24144921212531, 5.46497502611056), (19.241413819069912, 5.465090988851353), (19.14054128557751, 5.784246463287419), (19.14050758259161, 5.784350628266144), (19.140470267910356, 5.784465953549975), (19.034033917975048, 6.101810090141486), (19.033994693725944, 6.10192474469411), (19.033956734117687, 6.102035700473414), (18.92198646579717, 6.417479014302939), (18.921945343280793, 6.417592964578333), (18.921905546643938, 6.4177032387881034), (18.8044367437264, 6.73114572747038), (18.80439512288974, 6.73125528835238), (18.80435211402135, 6.731368500993982), (18.681420634915074, 7.042714493085554), (18.681378649716766, 7.042819681400631), (18.681333768332657, 7.042932123806079), (18.552978706465485, 7.352083012431944), (18.552931966937393, 7.352194652258067), (18.55288673449648, 7.352302690517065), (18.419144255236432, 7.65917131786172), (18.419095671176823, 7.659282122437182), (18.41904865371036, 7.659389352378578), (18.27996103050874, 7.963878426560009), (18.279912243029713, 7.9639848173977965), (18.279861828650965, 7.964094754283322), (18.13547151866867, 8.266111336964912), (18.13542434501286, 8.2662098228662), (18.135372116413034, 8.266318860514696), (17.98572505406617, 8.565767340782715), (17.985671027816814, 8.565875447922426), (17.830812872107263, 8.862668846894541), (17.830757064709843, 8.862775992239362), (17.83070125666867, 8.862883137233156), (17.670677481415545, 9.156929935495523), (17.67061990927716, 9.157036087691177), (17.670564193697466, 9.157138815278136), (17.505421789229715, 9.448352686242737), (17.50536246994583, 9.448457814578438), (17.505308890695225, 9.448552768884392), (17.335100178640243, 9.736841438214983), (17.335041099688343, 9.73694215509397), (17.33498005082338, 9.737046228826), (17.159758899283755, 10.022318315160616), (17.15969614068254, 10.022421304941323), (17.159633381463276, 10.022524294329372), (16.979451307377584, 10.304696082570715), (16.979386857593774, 10.304797958272285), (16.979324486253365, 10.30489654727732), (16.794234411016383, 10.583885197756203), (16.794168289744622, 10.583985929973162), (16.794108566786353, 10.584076913556228), (16.604169119874918, 10.859794025382307), (16.604103533577963, 10.859890373488838), (16.604035760483896, 10.859989932782991), (16.409307051626865, 11.132348103758371), (16.409237648554512, 11.132446462236748), (16.40916824489266, 11.132544820282703), (16.209707528402294, 11.401464131663495), (16.20963651596117, 11.401561260571604), (16.005506263211497, 11.666960888346077), (16.00543366367345, 11.66705676017895), (16.005361063561196, 11.667152631560292), (15.796624368902304, 11.928947289574), (15.796550203885676, 11.929041876331695), (15.796478430749744, 11.929133411464823), (15.583191883529684, 12.187252388782763), (15.583118617873302, 12.187342654423121), (15.583042909479166, 12.187435928455601), (15.365276298492777, 12.441794256035022), (15.36520156215248, 12.441883225820492), (15.365124334059727, 12.441975160794003), (15.14294667111207, 12.692492281136646), (15.142867947456976, 12.692582851168265), (15.1427892232603, 12.692673420711712), (14.916271009763834, 12.939270082592557), (14.916190814081997, 12.939359261280655), (14.916113204850063, 12.939445562763781), (14.68531074449771, 13.182060972734975), (14.685231734915785, 13.182145903500997), (14.685150091165198, 13.182233664795172), (14.450141453693039, 13.420785006695352), (14.450061067382855, 13.420868541975771), (14.449978001021785, 13.4209548612598), (14.210837646118392, 13.65536658703577), (14.210753183029954, 13.65545144017507), (13.967550028954582, 13.885658965989794), (13.967472501449935, 13.885734261431269), (13.967386666953583, 13.885817623736644), (13.720199177293473, 14.111743940187347), (13.720111998066093, 14.111825788409273), (13.720027630607055, 14.11190499585327), (13.468925588245558, 14.333486379024599), (13.468837090421603, 14.333566689340412), (13.468751446910298, 14.333644408480716), (13.21381426792033, 14.550810538428895), (13.213727374973203, 14.550886747715264), (13.213637585132899, 14.550965496766086), (12.954943087305965, 14.763650090378228), (12.954860845436965, 14.763719789187613), (12.954769791501832, 14.763796955192241), (12.692399996245028, 14.971932763311356), (12.692307706448975, 14.972008324939903), (12.69221839331496, 14.972081448554924), (12.426247391227085, 15.17560976910165), (12.426153893302226, 15.175683704419335), (12.426063411020749, 15.175755254178329), (12.156575324919196, 15.374611477683818), (12.156483701545248, 15.37468143394777), (11.883561940327205, 15.568806532695898), (11.883466112605284, 15.568877153853979), (11.883376466937206, 15.568943218274365), (11.607103195159345, 15.758276350633906), (11.607009373460276, 15.758343060730816), (11.606912423968579, 15.758411993910821), (11.327375097222614, 15.942893150239772), (11.327277056366214, 15.942960377246349), (11.32717901511098, 15.943027603650037), (11.04445983235633, 16.122602701340185), (11.044360729672832, 16.122668202747693), (11.04426482348036, 16.12273159062659), (10.758446885352912, 16.297347933848116), (10.75834675111318, 16.297411691354124), (10.758256306959128, 16.29746927825008), (10.469430083940036, 16.46707151692436), (10.4693322111846, 16.467131512941528), (10.469231075642979, 16.46719350821479), (10.177487956455428, 16.63172782286049), (10.177385851200423, 16.631788039851333), (9.882809239437965, 16.791209891604066), (9.882709519623349, 16.791266429042736), (9.882606475475272, 16.791324850440546), (9.58529196538943, 16.94558003590761), (9.585188014156248, 16.9456366462087), (9.585084062588919, 16.945693255872094), (9.285125845512477, 17.094733045189027), (9.285021018620448, 17.09478782821395), (9.284919572933559, 17.094840843432436), (8.982392356973115, 17.238628702185352), (8.982290095151045, 17.23867993510848), (8.982184424294807, 17.238732875158387), (8.67719061261143, 17.377219440087956), (8.677087565575805, 17.377268876091886), (8.676981083343307, 17.377319959320637), (8.369617232121609, 17.510461376134952), (8.369509971325112, 17.51051058929807), (8.059863726661767, 17.63827128012473), (8.059766172296879, 17.638314029609223), (8.059658165414366, 17.638361358766222), (7.747830278260867, 17.76069753055585), (7.74772155852822, 17.760742963574252), (7.747616345630274, 17.760786930377744), (7.43369495872969, 17.877664116932365), (7.433585559075123, 17.87770764097393), (7.433479688199229, 17.87774976037674), (7.117564106636049, 17.98913076425811), (7.117457610352914, 17.989171025691782), (7.1173475639546755, 17.989212628510874), (6.799534217366865, 18.095063456672808), (6.799430697607052, 18.095100569108048), (6.799320038329682, 18.095140240366668), (6.479709542562151, 18.195427433290092), (6.479598304415036, 18.195465163228448), (6.158285172127812, 18.29016128202919), (6.1581733890617, 18.290197060828174), (6.15806160578802, 18.29023283894394), (5.835143335346142, 18.379307042771284), (5.835031041282293, 18.379340860520788), (5.834922369421358, 18.37937358672185), (5.510493905337471, 18.46279978225758), (5.510381134572625, 18.46283163032615), (5.510279276949681, 18.462860395731493), (5.184443281476293, 18.540612096227964), (5.1843337204988575, 18.54064100307944), (5.184220507319928, 18.54067087281243), (4.857080072313655, 18.612723323689778), (4.856966451623302, 18.61275120897665), (4.528614476037343, 18.67908621120195), (4.5285041597210665, 18.679111269924466), (4.528390166049075, 18.679137163253223), (4.198933821097575, 18.739730819435305), (4.1988194893945865, 18.739754715290932), (4.198705157556097, 18.73977861044897), (3.868248724145124, 18.794611852663856), (3.868134089189898, 18.79463374479281), (3.8680231520190183, 18.79465493005827), (3.5366490277160487, 18.843714685869653), (3.536537831067468, 18.843733927847648), (3.536422927754542, 18.843753810535514), (3.204243324525431, 18.887022797372808), (3.204131902240487, 18.887040091149697), (2.8712484112947845, 18.92450712193234), (2.8711367974869306, 18.924522464546133), (2.8710214631334323, 18.924538317888768), (2.53753545971956, 18.956189949229515), (2.5374311398057103, 18.956202444459716), (2.5373156426872736, 18.956216277794873), (2.2033326569024205, 18.98204260252138), (2.203217032349618, 18.982054413976577), (2.2031051375617796, 18.982065843746433), (1.8687196470789105, 19.00205968037484), (1.8686039303298874, 19.002069467331953), (1.8684919463315557, 19.002078937909776), (1.5338097433751998, 19.01623374206431), (1.5336977044037843, 19.016241252877872), (1.1988209674352233, 19.024554733784345), (1.1987051723590691, 19.024560469179324), (1.1985968479098201, 19.02456583391071), (0.8636277360651373, 19.027033499617925), (0.8635156897227668, 19.027037088872873), (0.863399908489223, 19.02704079707642), (0.5284443988657309, 19.02366177944787), (0.5283286668601036, 19.02366346238253), (0.5282129348534502, 19.023665144613062), (0.19336953286816713, 19.014440599358437), (0.19325388542246172, 19.014440257496837), (0.19314196855018123, 19.014439925993262), (-0.14149085033460673, 18.99937266237694), (-0.14160637790098746, 18.99937029751433), (-0.4759117237222018, 18.97846724343987), (-0.47602709616437855, 18.978462858735682), (-0.47613874688101315, 18.978458614805717), (-0.810036807132465, 18.95172354560817), (-0.8101482736406471, 18.95171734987939), (-0.8102634556520938, 18.951710946937514), (-1.143641132927679, 18.919152256733945), (-1.1437523811505264, 18.919144112055065), (-1.1438673375884907, 18.91913569519959), (-1.47661917359186, 18.880763663103274), (-1.4767338694200898, 18.880753237291028), (-1.8087659909499239, 18.836580911454277), (-1.8088693201767296, 18.836569684458386), (-1.8089837203119852, 18.836557253908854), (-2.1401871609985847, 18.7865970444044), (-2.140301230594079, 18.786582615250417), (-2.140411620433581, 18.7865686508935), (-2.470692636578007, 18.730834816345023), (-2.4708063407120475, 18.730818393986908), (-2.47091637686773, 18.730802500725034), (-2.8001704651281325, 18.669312458816226), (-2.800280114110744, 18.669294643802406), (-3.128407209518614, 18.602069146058156), (-3.128520078806544, 18.602048758693655), (-3.128622025146552, 18.602030343711235), (-3.455521602534051, 18.529088056425973), (-3.4556303767754897, 18.529066419081587), (-3.455742776683266, 18.529044059821505), (-3.7813114177191287, 18.450407909251872), (-3.7814233141943845, 18.450383587909158), (-3.7815352105137676, 18.450359265887787), (-4.1056771665772995, 18.36605253802073), (-4.105788525302008, 18.36602626302809), (-4.428405428899959, 18.276076638532743), (-4.428516216043788, 18.276048420272666), (-4.428627003008252, 18.276020201340977), (-4.749616289109381, 18.180454161035215), (-4.749726470675565, 18.180424009158045), (-4.74983309781588, 18.180394829286236), (-5.069107472171011, 18.07923869231864), (-5.069213480882949, 18.079207652372514), (-5.069323023019391, 18.079175577108458), (-5.386777885086696, 17.97246204522338), (-5.386883242809568, 17.97242915566741), (-5.702422400522425, 17.860192704223504), (-5.702527075297139, 17.860157977366974), (-5.7026352390091875, 17.860122092304035), (-6.016161707305162, 17.742395074574006), (-6.016258736319346, 17.742360958871018), (-6.016366161074009, 17.742323187295142), (-6.3277808508926325, 17.619142942033577), (-6.327887504114776, 17.619103297768124), (-6.327990716674224, 17.619064931735206), (-6.637205432357013, 17.49046644361815), (-6.637311281236673, 17.490424939804253), (-6.94422559694936, 17.356451867529888), (-6.944330609429252, 17.356408519162144), (-6.944432234152445, 17.356366568523853), (-7.248958493975979, 17.217055274506226), (-7.249062637724709, 17.217010095866193), (-7.249156702804313, 17.216969288811143), (-7.551198599306454, 17.07236375627066), (-7.551298512113583, 17.07231827880509), (-7.551401755060162, 17.072271284809666), (-7.85086373920612, 16.92241711302304), (-7.850966050375594, 16.922368320894797), (-8.147764279467777, 16.767309888847638), (-8.147862358333514, 16.76726094655836), (-8.14796370618615, 16.767210372256702), (-8.442000119135402, 16.606996478592773), (-8.442100473041995, 16.606944139851915), (-8.442200826624294, 16.606891800504616), (-8.733382535434838, 16.44157321069945), (-8.733481864453244, 16.44151912461181), (-8.733577988991039, 16.441466782665294), (-9.02183220299654, 16.2710853512961), (-9.021927306652387, 16.27103133652418), (-9.307157414860137, 16.095645848990863), (-9.30725460372639, 16.095588323845014), (-9.307348657129525, 16.095532653790293), (-9.589466544128694, 15.915194920453635), (-9.589559518906674, 15.915137614305934), (-9.589655592484334, 15.915078397382684), (-9.868575147444986, 15.729843468195162), (-9.868663952615568, 15.729786508645864), (-10.14430125134184, 15.539712631618167), (-10.144391983714005, 15.53965211059135), (-10.144485740119396, 15.539589571640418), (-10.416752483886532, 15.344735114250744), (-10.416845038779218, 15.344670945462472), (-10.41693759327676, 15.344606776115938), (-10.685753702719474, 15.14502920185388), (-10.685845027444902, 15.14496342393976), (-10.951129709318568, 14.94072524155539), (-10.9512197763973, 14.94065787682669), (-10.951309843061782, 14.940590511555031), (-11.212975167615893, 14.731756905143206), (-11.213063949160757, 14.731687975336417), (-11.213149866381471, 14.73162126856236), (-11.47113036837873, 14.518244968919824), (-11.47121501567607, 14.518176770034948), (-11.47130248412417, 14.518106297335422), (-11.725510704499328, 14.300258958027943), (-11.725594055608603, 14.300189288967166), (-11.9759537677042, 14.07793890351334), (-11.97603579760258, 14.077867787672023), (-11.976120561387347, 14.077794300800546), (-12.222554009928281, 13.851207193998771), (-12.222629314265498, 13.851139490217937), (-12.22271268648716, 13.85106453198308), (-12.465142100831512, 13.620212428412886), (-12.46522405646326, 13.620136023845198), (-12.703579481418352, 13.38508829989011), (-12.703659995443674, 13.385010473983927), (-12.703740508992276, 13.384932647593477), (-12.937947775941975, 13.145759606421459), (-12.938026823299094, 13.145680384129355), (-12.938103320279653, 13.145603716942516), (-13.168093492822193, 12.902375811141994), (-13.168171049365336, 12.902295218335826), (-13.16824110001264, 12.902222424432834), (-13.393941479539677, 12.655016497084905), (-13.394015068648256, 12.654937203220568), (-13.615358206158847, 12.403829942678925), (-13.615430307631897, 12.403749374224251), (-13.615504811986558, 12.403666119714178), (-13.832421634354292, 12.148732833533202), (-13.832492225681806, 12.14865101627427), (-13.832565169545225, 12.14856647134249), (-14.04498716627554, 11.889887746171974), (-14.045058527889287, 11.889801938743236), (-14.252927069312664, 11.62745243557846), (-14.252992326402957, 11.627371009132089), (-14.253062083467825, 11.627283966663812), (-14.45630769387609, 11.361348159326642), (-14.4563758256041, 11.361259910472242), (-14.45644175902153, 11.361174507966114), (-14.655006799250346, 11.091727878956378), (-14.655073284296275, 11.091638451924435), (-14.848894418611474, 10.818770090752686), (-14.848959237216818, 10.81867951491804), (-14.84902196437336, 10.81859186051483), (-15.038042677127624, 10.54237811409162), (-15.038105808944417, 10.542286418393028), (-15.038162830749952, 10.542203596146894), (-15.22232339384098, 10.262731733511945), (-15.222382838150441, 10.262641940750171), (-15.401628656635081, 9.979998257621068), (-15.401686432295929, 9.979907439230047), (-15.401746133249523, 9.979813593208041), (-15.576020792429613, 9.694083276701567), (-15.576076881242663, 9.693991461682248), (-15.576134839114236, 9.69389658582144), (-15.74538333382469, 9.40516994734349), (-15.745439531490002, 9.405074072629294), (-15.909615605514032, 9.113434028485047), (-15.909664759341977, 9.113346557722995), (-15.909719179090496, 9.113249714784471), (-16.068767568209662, 8.81879059621429), (-16.06882019397077, 8.818692816593748), (-16.068871121560143, 8.818598190855624), (-16.222746619569858, 8.521403540125588), (-16.222797434673716, 8.521304855034138), (-16.371451506238405, 8.221472570415091), (-16.37150049576286, 8.221373011956805), (-16.3715479044036, 8.221276664783852), (-16.51493664602471, 7.91889099848124), (-16.51498379439906, 7.918790598432093), (-16.515026379502874, 7.91869991427553), (-16.65310450692435, 7.613856404085012), (-16.65314833872971, 7.613758459617992), (-16.785875457734903, 7.3065508798373315), (-16.785917481043167, 7.306452184000623), (-16.785960904518706, 7.30635019804891), (-16.913294650398708, 6.996871513918711), (-16.913334851771246, 6.996772098212648), (-16.913376392575586, 6.99666936840722), (-17.035276622327416, 6.6850173838418465), (-17.035316268392133, 6.684913943464437), (-17.151750240130756, 6.371177793474704), (-17.151785544557658, 6.371080393037418), (-17.151823283160912, 6.3709762751124295), (-17.262751193149278, 6.055257752878037), (-17.262787013370676, 6.0551529910800985), (-17.262821677495687, 6.05505160849337), (-17.36821198071785, 5.7374403256747675), (-17.36824587097497, 5.737334953447394), (-17.46806602980715, 5.417935193294866), (-17.468097980381415, 5.417829244679608), (-17.468128899680075, 5.417726713582417), (-17.562348705649246, 5.0966285640559015), (-17.56237870613215, 5.096522072881991), (-17.56240580278746, 5.096425887153891), (-17.650995532554884, 4.773730793658322), (-17.651022669267814, 4.773627245731272), (-17.65105070989959, 4.7735202460448605), (-17.73398235872207, 4.449330141403031), (-17.734008432161822, 4.449222667865915), (-17.811260345628497, 4.123630015795008), (-17.81128366653228, 4.123525583937586), (-17.811307764156183, 4.123417670879908), (-17.88285284402172, 3.7965283439406714), (-17.88287495911397, 3.7964200261196774), (-17.94869478536545, 3.4683271880446083), (-17.948712963515266, 3.4682290183698234), (-17.94873308869759, 3.4681203304047585), (-18.00880442220142, 3.1389307574705625), (-18.00882255193222, 3.1388217343226668), (-18.008840096204477, 3.13871622795117), (-18.063145709649685, 2.8085233563136462), (-18.063161837720422, 2.8084140328339893), (-18.063177444900727, 2.8083082358303466), (-18.11170011596893, 2.477216360760902), (-18.111713781919345, 2.4771103071309066), (-18.15444071226827, 2.1452207221796717), (-18.154452823477992, 2.1451109033627795), (-18.15446376206409, 2.1450117121149272), (-18.19138003740081, 1.8124254717480786), (-18.19138980832863, 1.812319006831793), (-18.19139990429935, 1.8122089930301264), (-18.22249386908568, 1.4790311559834284), (-18.222501947985776, 1.478920982571671), (-18.24776665420487, 1.1452462663610767), (-18.247772518080197, 1.1451395266240239), (-18.247778576762002, 1.1450292288649477), (-18.267203908339727, 0.8109664404963784), (-18.267207945604834, 0.8108560537654554), (-18.267211982202774, 0.8107456670154605), (-18.280792143240628, 0.4763967811684167), (-18.28079415719523, 0.4762863408181141), (-18.28852722326214, 0.14174630955558823), (-18.288527213921057, 0.14163585097983156), (-18.288527204245984, 0.1415289555890714), (-18.290408665312146, -0.1931001613543701), (-18.290406631994756, -0.19321060275699464), (-18.290404663633197, -0.1933174815169334), (-18.2864338833639, -0.5279299787102343), (-18.28642995754606, -0.5280368066100272), (-18.2766101717129, -0.8625306342263557), (-18.27660409353987, -0.8626409351403049), (-18.276598603004867, -0.862740561736101), (-18.260930920061913, -1.197013573760081), (-18.26092308287106, -1.1971201972592964), (-18.26091498378635, -1.1972303748217543), (-18.239404384917503, -1.5311769825983825), (-18.23939426864233, -1.5312870015942186), (-18.212048683485687, -1.8648125614903528), (-18.212036944382188, -1.8649188439237143), (-18.212024813323513, -1.8650286690275022), (-18.178851357562117, -2.1980241324515317), (-18.17883721606765, -2.1981337285420683), (-18.17882307391233, -2.1982433245418407), (-18.139832526668023, -2.5306035367539117), (-18.139816378418413, -2.530712868617172), (-18.095020690230417, -2.862350803317295), (-18.095002540753235, -2.862459836001022), (-18.094984976117402, -2.8625653513919547), (-18.04439614454432, -3.1933759616668893), (-18.04437599870444, -3.1934846600981937), (-18.044356502106783, -3.1935898520075714), (-17.987990492453154, -3.5234686342075987), (-17.987969070460867, -3.5235734690267644), (-17.92584507270836, -3.8524201344054108), (-17.925820953800592, -3.852528059991566), (-17.925799168422063, -3.8526255410364234), (-17.85793428634631, -4.180339371760933), (-17.857909033120002, -4.180443391538536), (-17.857882937482813, -4.180550878481847), (-17.78429866607298, -4.507028365033556), (-17.784270602887, -4.507135379146951), (-17.704989553662244, -4.832284277624574), (-17.704960499919107, -4.832387348866835), (-17.704930477087366, -4.832493855633675), (-17.619976821959852, -5.156207574667656), (-17.619944849268055, -5.156313540087304), (-17.619912875938848, -5.156419505308703), (-17.529312674117527, -5.478599270713875), (-17.529278760688754, -5.478704660572981), (-17.433059473151044, -5.799259557352435), (-17.433023629930563, -5.799364338008225), (-17.43298894234324, -5.799465738431903), (-17.33117787707554, -6.118297307277953), (-17.331140114354543, -6.118401444848511), (-17.331103569189924, -6.118502222920672), (-17.223732899305283, -6.435509744253178), (-17.223694508304696, -6.43560986781477), (-17.110798904574928, -6.750697287877112), (-17.110757338585135, -6.750800039312812), (-17.110719794580014, -6.7508928468411735), (-16.992331934146513, -7.063963360478461), (-16.992289886563267, -7.064062078465081), (-16.992246436791277, -7.064164086788265), (-16.868403798212235, -7.375118821380752), (-16.868358479070025, -7.375220054275491), (-16.86831315932013, -7.375321286891716), (-16.739052144890508, -7.684068617685775), (-16.739004969583014, -7.6841690422958475), (-16.60436687761643, -7.990615567800301), (-16.60431786112512, -7.9907151520842294), (-16.60426884403643, -7.990814736067391), (-16.464296198759712, -8.294859740877204), (-16.46424535546623, -8.294958452479694), (-16.464196151715363, -8.295053979540157), (-16.318923597651388, -8.59662063514915), (-16.318872641566514, -8.59671528716938), (-16.16835106142222, -8.895702842217572), (-16.168296612091872, -8.89579971356997), (-16.168243918638794, -8.895893459722627), (-16.01251744936201, -9.192209747966704), (-16.01246303516572, -9.192302558335571), (-16.01240680659761, -9.192398462044935), (-15.851522984007481, -9.485953036553388), (-15.851470606377424, -9.48603875790945), (-15.68548039564835, -9.776743109332326), (-15.685422589724025, -9.776833958268886), (-15.685362856382632, -9.776927835144178), (-15.514317034678628, -10.06468917353334), (-15.51425557626015, -10.064781991511618), (-15.514194117286234, -10.064874809114507), (-15.33814296950703, -10.349608327320647), (-15.338079804193418, -10.34970005601662), (-15.338018675948137, -10.349788825355258), (-15.157013904008156, -10.631410571144402), (-15.156949051064394, -10.631501180870346), (-14.971053793681243, -10.909917537511758), (-14.970987273439436, -10.910006999340258), (-14.97092289850276, -10.910093574917056), (-14.780183792083847, -11.185230094967038), (-14.780117823243621, -11.185315531612387), (-14.780049654923104, -11.185403815737065), (-14.584529106278838, -11.457170671648342), (-14.584461563138857, -11.457254941256995), (-14.384220858910869, -11.725570413207757), (-14.384151762568854, -11.725653488844147), (-14.384080362511256, -11.725739333240584), (-14.179178999852045, -11.99052031647051), (-14.179113079493458, -11.990596713793392), (-14.179040095759058, -11.99068129612088), (-13.969543125469142, -12.251844366137647), (-13.96946858078365, -12.251927659315506), (-13.75543903237168, -12.509397062688079), (-13.75536294945757, -12.509479039622054), (-13.755286866054819, -12.50956101609317), (-13.536788510714985, -12.763256875274356), (-13.536710912283576, -12.76333750879975), (-13.536635816569952, -12.763415540794387), (-13.31373284675805, -13.01326301985679), (-13.313653756479964, -13.013342283672692), (-13.313582319694067, -13.013413876383474), (-13.086345324417476, -13.259334158575276), (-13.086267365100044, -13.259409514958865), (-12.8547670533437, -13.501328868479153), (-12.854687697872189, -13.50140285013662), (-12.854605696770905, -13.501479297359216), (-12.618911265942762, -13.739322485270833), (-12.618830538076171, -13.739395067512392), (-12.618747118842032, -13.739470068663579), (-12.378933249156832, -13.973162120923787), (-12.378848437674135, -13.97323565193678), (-12.134984225973142, -14.202711474580797), (-12.134906387896926, -14.202776540047534), (-12.134820209619829, -14.202848576316564), (-11.886984347525784, -14.428032106867445), (-11.886896829134136, -14.428102625213647), (-11.886812133518026, -14.428170868268914), (-11.635074580038252, -14.648997875182287), (-11.634985747803041, -14.649066851869328), (-11.634899780734404, -14.649133602988936), (-11.379340156968773, -14.86553435856567), (-11.37925294505981, -14.865599596269524), (-11.119950517224892, -15.077509633226693), (-11.119859139384296, -15.077575459398677), (-11.11977365653545, -15.077637038219395), (-10.856806328518978, -15.284990162972093), (-10.856716706706322, -15.285052309189979), (-10.85662409712613, -15.285116526396312), (-10.590075123287114, -15.487847377688622), (-10.589981310954624, -15.4879099657259), (-10.5898874982522, -15.487972553194837), (-10.319835253165087, -15.686021322421004), (-10.319740266320315, -15.686082259935397), (-10.04626832605327, -15.879390165769818), (-10.046172194024303, -15.8794494330546), (-10.04607606164568, -15.879508699757293), (-9.76927300149956, -16.068011374311684), (-9.769175753276443, -16.068068951050545), (-9.769081641769658, -16.06812466991475), (-9.489016340271577, -16.251773971770632), (-9.488921177594964, -16.25182803651454), (-9.488822842505536, -16.251883902831057), (-9.205590090261705, -16.430618040830204), (-9.205493905119472, -16.430670432747633), (-8.919181181971734, -16.60443659712284), (-8.919084004006425, -16.60448729917572), (-8.918983586472843, -16.604539690699436), (-8.629677230816116, -16.773283115098096), (-8.629585632139301, -16.77332884331255), (-8.629484219035932, -16.77337947039498), (-8.337275903588234, -16.937047188202285), (-8.337173526121418, -16.93709603428154), (-8.337074450881094, -16.937143304091517), (-8.042046731322126, -17.09568845394215), (-8.041943420429265, -17.09573550180701), (-7.744193856442987, -17.249108353095504), (-7.744089643907588, -17.249153587326575), (-7.7439887928153786, -17.24919736178934), (-7.443600672374782, -17.397352338339104), (-7.443495589716204, -17.397395742816492), (-7.443400676129713, -17.397434946314945), (-7.140469076278008, -17.54032542805659), (-7.140366572372774, -17.540365647254948), (-7.140260651432811, -17.540407206463865), (-6.834881425557887, -17.677988180351388), (-6.8347746991116125, -17.678027881135904), (-6.527034949200703, -17.810261786020074), (-6.52693091750694, -17.810298394296616), (-6.526823417874474, -17.810336222210577), (-6.216823207264433, -17.937178398591836), (-6.216714967451422, -17.937214341053693), (-6.216606727430777, -17.937250282862312), (-5.90444072698193, -18.058662137087303), (-5.904331779799455, -18.05869618081008), (-5.904226346855536, -18.05872912572237), (-5.589979321281623, -18.17467695540535), (-5.589873236137285, -18.174708051754003), (-5.589763614639992, -18.174740183997002), (-5.2735384675150145, -18.285186279926183), (-5.2734317623472355, -18.28521551594948), (-4.955325624477781, -18.390128099003256), (-4.955218331998405, -18.39015546479037), (-4.955107462944603, -18.390183742112704), (-4.635216792173389, -18.48952886925311), (-4.63511613476968, -18.489552655198548), (-4.6350046925020925, -18.48957898899888), (-4.313430778735564, -18.583325677060902), (-4.313318797382685, -18.58335005824466), (-4.313210428200706, -18.583373652296054), (-3.9900441838361687, -18.67149479826224), (-3.989931697414791, -18.671517217027358), (-3.9898228394681485, -18.6715389119612), (-3.665166501979153, -18.75400676976869), (-3.6650571885908945, -18.754026557987565), (-3.33901029138955, -18.830817934183937), (-3.338896898036985, -18.83083640380242), (-3.338794478147388, -18.83085308545152), (-3.0114560983617173, -18.901942700171617), (-3.0113459741249016, -18.901958651917518), (-3.011232178992161, -18.901975134714196), (-2.6827058870268754, -18.96734069501926), (-2.682591725002763, -18.967355185578718), (-2.6824775629012363, -18.967369675451), (-2.3528599663874137, -19.026991762426782), (-2.352745472214122, -19.027004253952608), (-2.3526346713391235, -19.02701634186995), (-2.022022688405397, -19.0808771609152), (-2.0219078970160798, -19.080887647906287), (-1.6904175131316912, -19.128971415377553), (-1.6903024595938236, -19.128979893681354), (-1.6901911174213393, -19.128988097832575), (-1.357900985048392, -19.171280035047314), (-1.357789423139944, -19.171286291127707), (-1.3576741424728591, -19.171292755062055), (-1.0246967975506829, -19.207778939429293), (-1.0245850499051428, -19.207783243225798), (-1.0244695773217611, -19.20778768979916), (-0.6909103866303818, -19.238456907406935), (-0.6907947573668431, -19.238459334268843), (-0.6906791280989645, -19.23846176043575), (-0.35663991496354225, -19.263304781707436), (-0.3565241642826398, -19.263305185757122), (-0.02209951178610076, -19.282316543670287), (-0.021983674984247758, -19.28231492376969), (-0.021871574872623187, -19.282313355461362), (0.3128365666785749, -19.295485096444143), (0.31295245425049817, -19.295481450703956), (0.31306460348278836, -19.29547792190558), (0.6479503352953548, -19.302806013762225), (0.6480624994736081, -19.302800524590673), (0.6481784024138779, -19.302794851762012), (0.9831395054315978, -19.304277059018332), (0.9832441739789496, -19.304270105540482), (0.9833600569593889, -19.30426240638516), (1.3182905563523553, -19.29989872222168), (1.3184063840820603, -19.299888998051795), (1.6532078746108338, -19.289682399878725), (1.6533236117740242, -19.289670651973026), (1.653439348855849, -19.289658903372914), (1.9880095821488701, -19.27361048368365), (1.988125193363794, -19.27359671324469), (1.988237075095576, -19.27358338635315), (2.3224776579914423, -19.251697600856627), (2.322593107983887, -19.25168181039944), (2.3226973853055037, -19.251667547455956), (2.6565025751330014, -19.22395158685541), (2.6566141108308594, -19.223934353996007), (2.656729364269285, -19.223916546028146), (2.989993551321874, -19.19037938069704), (2.99010857326688, -19.190359560280648), (2.9902235950817886, -19.190339739174874), (3.322848773471551, -19.150991032843116), (3.3229635287108326, -19.150969203648962), (3.654848471212505, -19.105822970784306), (3.6549629248874265, -19.105799138472847), (3.6550773784080297, -19.105775305475788), (3.986113153541883, -19.0548449867898), (3.986227270599985, -19.05481915630383), (3.986337706304268, -19.05479415840866), (4.3164416983407135, -18.99809126379907), (4.316551774743325, -18.998064338801466), (4.316665520183843, -18.998036515633956), (4.64572589404282, -18.9355806606481), (4.645835577397426, -18.935551814471463), (4.645948916676567, -18.935522006088213), (4.973861590120001, -18.86733328115899), (4.973974488859201, -18.867301495645915), (4.974087387396148, -18.86726970945732), (5.300752299997273, -18.793369056957705), (5.300864723566774, -18.793335301672027), (5.300973520365645, -18.793302634626265), (5.626301858074288, -18.713709409968384), (5.62641016203774, -18.71367484565794), (5.950295883210094, -18.628417346263273), (5.95040725391632, -18.628379678498636), (5.950515031792769, -18.628343225189298), (6.272858766731323, -18.537445516158026), (6.272965985878367, -18.537407183983646), (6.273076778751598, -18.537367573418706), (6.593780137521514, -18.440857401296082), (6.59387965650515, -18.440819879805996), (6.593989837988652, -18.440778337529878), (6.912951439538016, -18.33868668781596), (6.9130609762712565, -18.338643225432115), (6.913166979301955, -18.338601164437797), (7.230296514411501, -18.230956333873696), (7.230405372713235, -18.230910962301976), (7.230510719186386, -18.230867053710547), (7.545707835389167, -18.117703240716576), (7.545812493449011, -18.117657496921407), (7.545920639820134, -18.117610227698027), (7.859089128777558, -17.99896197519015), (7.859186137063931, -17.99891757906311), (8.170231236604096, -17.874823094335078), (8.170334422040485, -17.874773717072912), (8.170441046678459, -17.874722693276375), (8.479263610457474, -17.74521955694787), (8.479369425485121, -17.745166676695636), (8.479475240183543, -17.74511379581256), (8.785984445264585, -17.610239892261387), (8.786089418079525, -17.610185169370308), (8.786191004350622, -17.610132211138133), (9.09029668064679, -17.469926944691238), (9.090400779221808, -17.469870394176482), (9.090494803439258, -17.46981931575916), (9.392100773383863, -17.324327305952902), (9.392200637194117, -17.324270826098854), (9.392303829441753, -17.324212462978405), (9.691314678561646, -17.173479943115783), (9.691416933688322, -17.173419784684747), (9.691519188442072, -17.17335962564503), (9.987846978149344, -17.017430723251817), (9.987948264595204, -17.01736878556996), (9.98804628337109, -17.01730884530405), (10.28160383257495, -16.856229158642517), (10.2817041194379, -16.85616545892724), (10.57239311933933, -16.68999200604904), (10.572492376440099, -16.689926562664656), (10.572588431313685, -16.68986322979531), (10.860332061988768, -16.51863669813498), (10.860427091010502, -16.518571695516528), (10.860525287257996, -16.518504525570012), (11.145229250545487, -16.3422812903535), (11.145323224331216, -16.34221463562222), (11.14542033015812, -16.342145758499083), (11.42699462952671, -16.160981886687797), (11.427090615742316, -16.1609113222934), (11.427186601522605, -16.160840757329137), (11.705542306046269, -15.9747939860331), (11.705637142969787, -15.974721753677498), (11.705728920213732, -15.974651850862022), (11.980796437871401, -15.783767426559503), (11.980887075300942, -15.783695929799824), (11.980980733530306, -15.783622049268276), (12.252666816712884, -15.587965066599281), (12.252756286244932, -15.587891995540327), (12.252848737637322, -15.587816488240174), (12.521067517353037, -15.387449157163323), (12.52115873417754, -15.387372044994294), (12.521249950527531, -15.387294932284794), (12.785916737482108, -15.18228105450583), (12.786006691476517, -15.182202358803288), (12.786093743268339, -15.182126201164609), (13.047142343701385, -14.97251576457911), (13.047228147280558, -14.972438096582373), (13.30457137075039, -14.758304082626616), (13.30465871759024, -14.75822228777793), (13.304743246311668, -14.758143130980812), (13.558301255081172, -14.539549341678175), (13.55838448365225, -14.53946871910034), (13.558470486005765, -14.539385408603017), (13.808165887100841, -14.31639856742609), (13.808242329490138, -14.31632197261602), (13.80832696164016, -14.316237170743364), (14.054080946070565, -14.088928219497541), (14.054164182694535, -14.088841950904403), (14.054244733762271, -14.088758464701185), (14.295987617479568, -13.857191172473799)]

    space_entites = [sun, mercury, venus, earth, mars, jupiter, saturn, uranus, neptune]
    for entity in space_entites:
        solar_system.instances.append(entity)
        entity.generate_stats(entity)


def get_planet_coords(century, first_run):
    solar_system.instances[0].draw()
    if solar_system.sim_running or solar_system.date_edited:
        mercury_x, mercury_y = solar_system.instances[1].get_planet_coords('Mercury', century)
        venus_x, venus_y = solar_system.instances[2].get_planet_coords('Venus', century)
        earth_x, earth_y = solar_system.instances[3].get_planet_coords('Earth', century)
        mars_x, mars_y = solar_system.instances[4].get_planet_coords("Mars", century)

        jupiter_x, jupiter_y = solar_system.instances[5].get_planet_coords('Jupiter', century)
        saturn_x, saturn_y = solar_system.instances[6].get_planet_coords('Saturn', century)
        uranus_x, uranus_y = solar_system.instances[7].get_planet_coords('Uranus', century)
        neptune_x, neptune_y = solar_system.instances[8].get_planet_coords('Neptune', century)

        planetxvals = [mercury_x, venus_x, earth_x, mars_x, jupiter_x, saturn_x, uranus_x, neptune_x]
        planetyvals = [mercury_y, venus_y, earth_y, mars_y, jupiter_y, saturn_y, uranus_y, neptune_y]

        for i in range(1, len(solar_system.instances)):
            planet = solar_system.instances[i]  # to miss out the sun
            planet.x = planetxvals[i - 1]
            planet.y = planetyvals[i - 1]
            planet.draw()
            if first_run:
                set_start_pos(solar_system.instances[i])

            point = (planet.x, planet.y)

            if planet.append_orbit:
                planet.orbital_points.append(point)

            if not planet.rotated_once:
                planet.check_fully_rotated()
                planet.append_orbit = True
            else:
                planet.append_orbit = False

            # print(solar_system.instances[4].rotated_once)





    else:
        for i in range(len(solar_system.instances)):
            solar_system.instances[i].draw()


def show_body_info():
    for i in range(len(solar_system.instances)):
        if solar_system.instances[i].clicked_on:
            blit_text(window, solar_system_info[i], (1360, 350), solar_system.txt_colour)
            # render_multi_line(solar_system_info[i], 1385, 350, 2)
            window.blit(imgs[i], (1470, 170))

            return
    blit_text(window, system_info, (1360, 350), solar_system.txt_colour)
    window.blit(solarSystemImg, (1450, 200))


def blit_line(text, x, y, colour):
    line = font.render(text, True, colour)
    window.blit(line, (x, y))





#


def show_controls():
    left_labels_y = 50
    left_side_tips = [f"SPEED: {round(solar_system.speed_multiplier, 2)}X",
                      "S: ENABLE / DISABLE ORBIT LINES", "ARROW KEYS: MOVE SCREEN",
                      "RIGHT CLICK: ENABLE / DISABLE PLANET INFO",
                      "C: CENTRE SCREEN"]

    for i in left_side_tips:
        blit_line(i, 20, left_labels_y, 'white')
        left_labels_y += 30


def set_default_elements(combo, sliders):
    planet = solar_system.instances[combo.selected + 1]

    if planet.default_vals:
        sliders[0].setValue(planet.semi_major)
        sliders[1].setValue(planet.eccentricity)
    else:
        for slider in sliders:
            if slider.selected:
                planet.orbit = []
                set_start_pos(planet)
                planet.rotated_once = False

        if combo.button_clicked:
            sliders[0].setValue(planet.semi_major)
            sliders[1].setValue(planet.eccentricity)
            combo.button_clicked = False

        planet.semi_major = sliders[0].getValue()
        planet.eccentricity = sliders[1].getValue()
        # planet.orbit_incl = sliders[2].getValue()
        # planet.long_asc_node = sliders[3].getValue()
        # planet.long_perihelion = sliders[4].getValue()


def blit_text(surface, text, pos, color, font=pygame.font.SysFont('Consolas', 15)):
    words = [word.split(' ') for word in text.splitlines()]  # 2D array where each row is a list of words.
    space = font.size(' ')[0]

    x, y = pos
    for line in words:
        for word in line:
            word_surface = font.render(word, True, color)
            word_width, word_height = word_surface.get_size()
            if x + word_width >= 1920:
                x = pos[0]  # Reset the x.
                y += word_height  # Start on new row.
            surface.blit(word_surface, (x, y))
            x += word_width + space
        x = pos[0]  # Reset the x.
        y += word_height  # Start on new row.


def btn_clicked(selected_btn, buttons):
    selected_btn.button_clicked = True
    for btn in buttons:
        if btn.button_clicked:
            btn.button_clicked = False
            btn.accent_colour = '#333333'
            return True


def check_which_orbit():
    for planet in solar_system.instances:
        if not planet.rotated_once:
            if planet.name not in ['Sun', 'Uranus', 'Neptune', 'Saturn', 'Jupiter']:
                print('---------------------------')
                print(planet.name)


def draw_rect_alpha(surface, color, shape_surf, rect):
    pygame.draw.rect(shape_surf, color, shape_surf.get_rect(), 0, 32)

    pygame.draw.rect(shape_surf, solar_system.sim_accent_colour, shape_surf.get_rect(), 2, 32)
    surface.blit(shape_surf, rect)


def clear_file(filename):
    open(filename, 'w').close()

def start_sim(id):
    window = pygame.display.set_mode((1920, 1080), FULLSCREEN | DOUBLEBUF)

    global SIM_WIDTH, SIM_HEIGHT, new_date, distance_graphImg, anomaly_graphImg
    count = 0
    c = 0


    first_run = True
    show_menu = False
    leftwidth = window.get_width() * 0.7
    print(leftwidth)
    leftheight = window.get_height() * 0.95
    topheight = window.get_height() * 0.05
    height = window.get_height()
    rightrect = (leftwidth, 0, leftwidth, height)
    print(rightrect)
    print(leftheight)

    SIM_WIDTH, SIM_HEIGHT = leftwidth, leftheight

    right_surf = pygame.Surface(pygame.Rect(rightrect).size, pygame.SRCALPHA)

    paused_text_x = 850

    create_solarSystem()
    print(rightrect[0])

    planet_info_btn = Button(1450, 100, 90, 22, 'INFO')
    physics_btn = Button(1700, 100, 130, 22, 'ADJUST PHYSICS')
    settings_btn = Button(1650, 140, 90, 22, 'SETTINGS')
    instructions_btn = Button(1560, 100, 120, 22, 'INSTRUCTIONS')
    submit_btn = Button(1520, 1000, 250, 22, 'SUBMIT')
    default_vals_btn = Button(1420, 800, 120, 22, 'DEFAULT VALS')
    custom_vals_btn = Button(1720, 800, 120, 22, 'CUSTOM VALS')
    reset_all_vals = Button(1570, 800, 120, 22, 'RESET VALS')
    graph_btn = Button(1500, 140, 120, 22, 'GRAPHS')

    dropdown = Button(pygame.display.get_surface().get_width()-10, 540, 3, 120, '')

    buttons = [planet_info_btn, physics_btn, settings_btn, instructions_btn, submit_btn, default_vals_btn,
               custom_vals_btn
        , reset_all_vals, graph_btn, dropdown]

    planet_info_btn.button_clicked = True
    # centre for FULL window




    fps = 60
    # --------------------------CREATING WIDGETS----------------------------------------------------#
    date_textbox, sliders, physics_combo_box, theme_comboBox, side_labels, val_outputs, \
    fps_optionbox, graph_optionbox, planet1_optionbox, planet2_optionbox, graph_optionbox1, \
    graph_optionbox2, accents_optionbox, metric_optionbox = create_widgets(window, solar_system)
    # -----------------------------------------------------------------------------------------------#
    # graph optionbox1 : background figure colour, graph optionbox 2 graph line colour
    clock = pygame.time.Clock()
    element_labels_y = 310
    while solar_system.user_access:

        if count > 100:
            if not user_has_access(id):
                solar_system.user_access = False
            count = 0
        count += 1


        clock.tick(fps)

        shift_distance = 10

        window.fill(solar_system.window_colour)
        rgb = solar_system.overlay_colour + (200,)
        graphImgs = [distance_graphImg, anomaly_graphImg]

        # window.blit(space_backgroundImg, (0, 0))

        blit_line(f'FPS: {round(clock.get_fps())}', 20, 200, 'white')
        jul_century = gregorian_to_julian(solar_system.year, solar_system.month, solar_system.day)

        get_planet_coords(jul_century, first_run)

        show_controls()

        if solar_system.date_edited:
            for planet in solar_system.instances:
                set_start_pos(planet)
                planet.rotated_once = False

        if solar_system.sim_running:
            solar_system.date_edited = False
            date_textbox.colour = solar_system.window_colour
            solar_system.year, solar_system.month, solar_system.day \
                = increment_date(solar_system.year, solar_system.month, solar_system.day)
            date_textbox.setText(f'{solar_system.year}-{solar_system.month}-{round(solar_system.day)}')

            solar_system.day += 0.4 * round(solar_system.speed_multiplier, 2)
            solar_system.day = round(solar_system.day, 2)

        else:
            blit_line('SIMULATION PAUSED', paused_text_x, window.get_height()-30, solar_system.sim_accent_colour)

            if date_textbox.selected:
                solar_system.date_edited = True

                try:
                    new_date = date_textbox.getText()
                    date_lst = new_date.split('-')

                    new_year = int(date_lst[0])

                    new_month = int(date_lst[1])

                    new_day = float(date_lst[2])
                    new_day = int(new_day)

                    datetime.datetime(year=new_year, month=new_month, day=new_day)

                except:
                    blit_line('Date has to be in format yyyy-m-d', 190, 20, solar_system.sim_accent_colour)



                else:
                    solar_system.year = int(date_lst[0])

                    solar_system.month = int(date_lst[1])

                    solar_system.day = float(date_lst[2])
                    solar_system.day = int(solar_system.day)

                    for planet in solar_system.instances:
                        planet.orbital_points = []
                        planet.rotated_once = False




            else:
                solar_system.date_edited = False

        # -----------------------EVENTS--------------------------

        events = pygame.event.get()

        for event in events:
            pos = pygame.mouse.get_pos()

            if not solar_system.user_access or event.type == pygame.QUIT or (event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE):
                quit()



            elif event.type == pygame.MOUSEBUTTONDOWN:
                if event.button == 5:  # scroll down: zoom out
                    if solar_system.zoom_out():
                        Body.SCALE *= 0.75
                        # mercury_icon = pygame.transform.scale(mercury_icon, (mercury_icon.get_width() * 0.75, mercury_icon.get_height() * 0.75))

                        solar_system.update_scale(0.75)

                elif event.button == 1:  # left mouse button pressed
                    if planet_info_btn.isOver(pos):  # INFO button clicked
                        btn_clicked(planet_info_btn, (physics_btn, settings_btn, instructions_btn, graph_btn))

                    elif physics_btn.isOver(pos):  # ADJUST PHYSICS BUTTON CLICKED
                        btn_clicked(physics_btn, (planet_info_btn, settings_btn, instructions_btn, graph_btn))


                    elif settings_btn.isOver(pos):  # SETTINGS BUTTONS CLICKED
                        btn_clicked(settings_btn, (planet_info_btn, physics_btn, instructions_btn, graph_btn))

                    elif instructions_btn.isOver(pos):
                        btn_clicked(instructions_btn, (planet_info_btn, settings_btn, physics_btn, graph_btn))

                    elif graph_btn.isOver(pos):
                        btn_clicked(graph_btn, (planet_info_btn, settings_btn, physics_btn, instructions_btn))
                    elif dropdown.isOver(pos):
                        if show_menu:  # close menu
                            dropdown.x = pygame.display.get_surface().get_width()-10
                            show_menu = False
                            paused_text_x = 850
                        else:
                            dropdown.x = 1340
                            show_menu = True
                            paused_text_x = leftwidth / 2

                    if custom_vals_btn.isOver(
                            pos) and physics_btn.button_clicked:  # so if press 'white' on bottom settings
                        # doesn't interfere with custom vals button which is on the same position
                        planet = solar_system.instances[physics_combo_box.selected + 1]

                        btn_clicked(custom_vals_btn, (default_vals_btn, reset_all_vals))
                        planet.default_vals = False
                        solar_system.instances[physics_combo_box.selected + 1].rotated_once = False
                        planet.orbit = []
                        set_start_pos(planet)

                        custom_vals_btn.button_clicked = False


                    elif default_vals_btn.isOver(pos):
                        planet = solar_system.instances[physics_combo_box.selected + 1]
                        btn_clicked(default_vals_btn, (custom_vals_btn, reset_all_vals))
                        planet.orbit = []
                        planet.default_vals = True
                        set_start_pos(planet)
                        planet.rotated_once = False
                        solar_system.instances[physics_combo_box.selected + 1].rotated_once = False
                        default_vals_btn.button_clicked = False




                    elif reset_all_vals.isOver(pos):
                        btn_clicked(reset_all_vals, (default_vals_btn, custom_vals_btn))
                        for planet in solar_system.instances:
                            planet.rotated_once = False
                            planet.orbital_points = []
                            set_start_pos(planet)
                            planet.default_vals = True
                        reset_all_vals.button_clicked = False

                    if submit_btn.isOver(pos):
                        if submit_btn.button_clicked:
                            submit_btn.button_clicked = False
                        else:
                            submit_btn.button_clicked = True
                        c = 0
                        distance_graph.clear_graph()

                    for planet in solar_system.instances:
                        if planet.circleRect.collidepoint(pygame.mouse.get_pos()):
                            if planet.clicked_on:
                                planet.clicked_on = False
                            else:
                                planet.clicked_on = True

                elif event.button == 3:
                    for planet in solar_system.instances:
                        if planet.circleRect.collidepoint(pygame.mouse.get_pos()):
                            if not planet.enableTxt:  # show no info
                                planet.enableTxt = True
                            else:
                                if planet.enableDistance:
                                    planet.enableDistance = False
                                else:
                                    planet.enableDistance = True
                                planet.enableTxt = False
                elif event.button == 4:  # scroll up
                    if solar_system.zoom_in():
                        solar_system.update_scale(1.25)
                        Body.SCALE *= 1.25

            elif event.type == pygame.KEYDOWN:  # if key pressed
                if event.key == pygame.K_s:
                    if solar_system.drawline:
                        solar_system.drawline = False
                    else:
                        solar_system.drawline = True
                elif event.key == pygame.K_SPACE:
                    if solar_system.sim_running:
                        solar_system.sim_running = False
                    else:
                        solar_system.sim_running = True

                elif event.key == pygame.K_a:
                    solar_system.decrease_speed()
                elif event.key == pygame.K_d:
                    solar_system.increase_speed()
                elif event.key == pygame.K_c:
                    if show_menu:
                        solar_system.shiftx, solar_system.shifty = -solar_system.sun.x * solar_system.sun.SCALE, -solar_system.sun.y * solar_system.sun.SCALE
                    else:
                        solar_system.shiftx = 240
                        solar_system.shifty = 0

        keys = pygame.key.get_pressed()

        if keys[pygame.K_LEFT]:
            solar_system.shiftx += shift_distance
        elif keys[pygame.K_RIGHT]:
            solar_system.shiftx -= shift_distance
        elif keys[pygame.K_UP]:
            solar_system.shifty += shift_distance
        elif keys[pygame.K_DOWN]:
            solar_system.shifty -= shift_distance

        # ------------------------------------------------------------#

        physics_combo_box.update(events)
        theme_comboBox.update(events)
        pygame_widgets.update(events)
        graph_optionbox.update(events)
        planet1_optionbox.update(events)
        planet2_optionbox.update(events)
        graph_optionbox1.update(events)
        graph_optionbox2.update(events)
        accents_optionbox.update(events)
        fps_optionbox.update(events)
        metric_optionbox.update(events)

        if show_menu:

            draw_rect_alpha(window, rgb, right_surf, rightrect)

            # logo.set_colorkey((0, 0, 0))
            window.blit(logo, (1530, 10))

            planet_info_btn.draw(window)
            physics_btn.draw(window)
            settings_btn.draw(window)
            instructions_btn.draw(window)
            graph_btn.draw(window)

            if planet_info_btn.button_clicked:
                show_body_info()

            elif settings_btn.button_clicked:
                blit_line('SETTINGS', 1570, 200, solar_system.sim_accent_colour)
                side_labels_y = 320
                metric_optionbox.draw(window)

                accents_optionbox.draw(window)

                graph_optionbox2.draw(window)

                graph_optionbox1.draw(window)
                fps_optionbox.draw(window)

                submit_btn.draw(window)

                for label in setting_labels:
                    blit_line(label, 1400, side_labels_y, 'white')
                    side_labels_y += 100

                if submit_btn.button_clicked:
                    accent_colour = accents_optionbox.option_list[accents_optionbox.selected]
                    solar_system.theme = theme_comboBox.selected
                    submit_btn.button_clicked = False
                    date_textbox.colour = solar_system.window_colour
                    date_textbox.textColour = accent_colour

                    for btn in buttons:
                        btn.given_bd_colour = accent_colour
                    solar_system.sim_accent_colour = accent_colour
                    print(solar_system.sim_accent_colour)

                    solar_system.check_theme()
                    fps = float(fps_optionbox.option_list[fps_optionbox.selected])

                    for optionbox in [physics_combo_box, graph_optionbox, metric_optionbox, planet1_optionbox,
                                      fps_optionbox, planet2_optionbox,
                                      graph_optionbox1,
                                      graph_optionbox2, accents_optionbox, theme_comboBox]:
                        optionbox.accent_colour = solar_system.sim_accent_colour
                        optionbox.txt_colour = solar_system.txt_colour
                        optionbox.color = solar_system.overlay_colour
                    for graph in graphs:
                        graph.bg_color = theme_colours[graph_optionbox1.selected]

                        # graph.line_color = theme_colours[graph_optionbox2.selected]
                    solar_system.distance_metric = metric_optionbox.option_list[metric_optionbox.selected]
                    distance_graph.ylabel_txt = f'Distance between Planets ({solar_system.distance_metric}{" * 10M" if solar_system.distance_metric == "KM" else print()})'
                theme_comboBox.draw(window)

            if physics_btn.button_clicked:
                for i in range(len(sliders)):
                    sliders[i].handleColour = colour_dict[solar_system.sim_accent_colour]
                    sliders[i].draw()
                    sliders[i].show()
                    val_outputs[i].draw()
                    val_outputs[i].show()
                    val_outputs[i].setText(round(sliders[i].getValue(), 9))

                for i in range(3):
                    blit_line(side_labels[i], 1370, element_labels_y, 'white')
                    element_labels_y += 100
                element_labels_y = 310
                blit_line('ADJUST PHYSICS', 1500, 200, solar_system.sim_accent_colour)
                set_default_elements(physics_combo_box, sliders)

                if solar_system.instances[physics_combo_box.selected + 1].default_vals:
                    default_vals_btn.highlight_btn = True
                    custom_vals_btn.highlight_btn = False
                else:
                    default_vals_btn.highlight_btn = False
                    custom_vals_btn.highlight_btn = True

                default_vals_btn.draw(window)
                custom_vals_btn.draw(window)
                physics_combo_box.draw(window)
                reset_all_vals.draw(window)


            elif not physics_btn.button_clicked:
                for i in range(len(sliders)):
                    sliders[i].hide()
                    val_outputs[i].hide()
                if instructions_btn.button_clicked:
                    blit_text(window, instructions, (1400, 190), solar_system.txt_colour)
                    blit_line('InstructionsBaG', 1560, 200, solar_system.sim_accent_colour)

            if graph_btn.button_clicked:
                min, max = 0, 3  # ensure correct range of lables are shown
                blit_line('GRAPHS', 1600, 200, solar_system.sim_accent_colour)
                graph_labels_y = 320

                if graph_optionbox.selected == 0:
                    planet2_optionbox.draw(window)
                    planet1_optionbox.draw(window)

                elif graph_optionbox.selected == 1 or graph_optionbox.selected == 2:
                    planet1_optionbox.draw(window)
                    max = 2

                graph_optionbox.draw(window)

                for i in range(min, max):
                    blit_line(graphTab_labels[i], 1400, graph_labels_y, 'white')
                    graph_labels_y += 100
                submit_btn.draw(window)

                if submit_btn.button_clicked:
                    if solar_system.sim_running:
                        c += 1
                        if c > 20:

                            if graph_optionbox.selected == 0:
                                planet_distance = calculate_distance(
                                    solar_system.instances[planet1_optionbox.selected + 1],  # excludes the sun
                                    solar_system.instances[planet2_optionbox.selected])
                                planet_distance = convert_to_km(planet_distance, solar_system.distance_metric)
                                distance_graph.values.append(planet_distance)

                                animation.FuncAnimation(plt.gcf(), distance_graph.plot(), interval=500)
                                distance_graphImg = pygame.image.load('distance_graph.png').convert_alpha()
                                c = 0


                            elif graph_optionbox.selected == 1:
                                planet = solar_system.instances[planet1_optionbox.selected + 1]

                                anomaly_graph.values.append(planet.true_anomaly)
                                animation.FuncAnimation(plt.gcf(), anomaly_graph.plot(), interval=500)
                                anomaly_graphImg = pygame.image.load('anomaly_graph.png').convert_alpha()

                                c = 0

                    window.blit(graphImgs[graph_optionbox.selected], (1400, 600))

                    # true anomaly




        else:
            for i in range(len(sliders)):
                sliders[i].hide()
                val_outputs[i].hide()
        if pygame.display.get_surface().get_width() == 1920 and pygame.display.get_surface().get_height() == 1080:
            dropdown.draw(window)

        if first_run:
            first_run = False

        pygame.display.update()
    pygame.quit()

start_sim('Admin01')
# window = Tk()
# messagebox.showerror(message='You no longer have access! Closing simulation...')
# window.destroy()
# window.mainloop()

